* Interrupts
Interrupt ABI is as follows:
- takes args in ax, bx, cx, dx, si, di
- may clobber all of the argument registers
- returns a status in ax

the interrupt handler properly handles saving and restoring cs, ds, and es

* int 0x40 - general file I/O

** open_file (int 0x40 ax = 0)
    finds a file by its name and opens it
    this modifies the open file state for future syscalls
    *** args:
        - bx:cx: segment and pointer to null terminated 8.3 format name of the file
    *** returns:
        - ax: 0 if success, 1 if failure

** create_file (int 0x40 ax = 1)
    creates a file with the specified name, if the file does not exist.
    also opens the newly created file.
    *** args:
        - bx:cx: segment and pointer to null terminated 8.3 format name of the file
    *** returns:
        - ax: 0 if success, 1 if failure

** read_file (int 0x40 ax = 2)
    reads a specified range of the currently open file into a buffer.
    a file MUST be open or behavior is undefined.
    *** args:
        - bx: the offset in bytes to begin reading from
        - cx: the number of bytes to read
        - dx:si: segment and pointer to the destination buffer to place the contents of the file
    *** returns: <none>

** write_file (int 0x40 ax = 3)
    writes to the currently open file from the contents of a buffer, expanding the file
    on disk as needed to accomodate the newly written data.
    a file MUST be open or behavior is undefined.
    *** args:
        - bx: the offset into the file to begin writing to
        - cx: the number of bytes to write to the file
        - dx:si: segment and pointer to the source buffer to write into the file.
    *** returns: <none>

** file_info (int 0x40 ax = 4)
    gets the metadata for the currently open file.
    a file must be open or behavior is undefined.
    *** args:
        - bx:cx: out pointer to place the file metadata into
    *** returns: <none>

* int 0x41 - stdio

** read_char (int 0x41 ax = 0)
    reads a character from the serial input
    *** args: <none>
    *** returns:
        - ah: 0
        - al: the character read from the serial port

** print_char (int 0x41 ax = 1)
    prints a character to the serial output
    *** args:
        - bx: the ASCII character to print
    *** returns: <none>

** print_string (int 0x41 ax = 2)
    prints a null-terminated string to the serial output
    *** args:
        - bx:cx: segment and pointer to the string to print
    *** returns: <none>

** print_string_len (int 0x41 ax = 3)
    prints a string with a specified length to the serial output
    *** args:
        - bx:cx: segment and pointer to the string to print
        - dx: length of the string to print
    *** returns: <none>

** read_line (int 0x41 ax = 4)
    reads a line of input from the serial input into a buffer with a specified length.
    the line will always be null terminated, even if the full line would not fit.
    in this case, the line will be truncated such that it and the terminator fit into
    the buffer, and the rest of the line will be discarded.
    the line will not have a CR or LF at the end.
    the null terminator is counted in the length argument and return value.
    *** args:
        - bx:cx: segment and pointer of the buffer to fill
        - dx: the maximum number of bytes to fill
    *** returns:
        - ax: the number of bytes read, including the null terminator
