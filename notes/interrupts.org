* Interrupts
Interrupt ABI is as follows:
- takes args in ax, bx, cx, dx, si, di
- may clobber all of the argument registers
- returns a status in ax

the interrupt handler properly handles saving and restoring cs, ds, and es

* int 0x40 - general file I/O

** open_file (int 0x40 ax = 0)
    finds a file by its name and opens it
    this modifies the open file state for future syscalls
    *** args:
        - bx: pointer to null terminated 8.3 format name of the file
    *** retuns:
        - ax: 0 if success, 1 if failure

** create_file (int 0x40 ax = 1)
    creates a file with the specified name, if the file does not exist.
    also opens the newly created file.
    *** args:
        - bx: pointer to null terminated 8.3 format name of the file
    *** retuns:
        - ax: 0 if success, 1 if failure

** read_file_sector (int 0x40 ax = 2)
    reads the specified linear disk sector of the currently open file
    into a specified buffer. a file MUST be open or behavior is undefined.
    *** args:
        - bx: the sector to read, must be in bounds of the file
        - cx:dx: segment and pointer to the destination buffer to place the contents of the sector
    *** retuns: <none>

** write_file (int 0x40 ax = 3)
    writes to the currently open file from the contents of a buffer, expanding the file
    on disk as needed to accomodate the newly written data.
    a file MUST be open or behavior is undefined.
    *** args:
        - bx: the offset into the file to begin writing to
        - cx: the number of bytes to write to the file
        - dx:si: segment and pointer to the source buffer to write into the file.
    *** retuns: <none>

** file_info (int 0x40 ax = 4)
    gets the metadata for the currently open file.
    a file must be open or behavior is undefined.
    *** args:
        - bx:cx: out pointer to place the file metadata into
    *** returns: <none>
